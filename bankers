
#include <stdio.h>

int main() {
    int alloc[3][3] = {{2, 3, 2}, {1, 2, 1}, {3, 2, 2}};
    int max[3][3] = {{3, 3, 3}, {2, 2, 2}, {4, 3, 3}};
    int avail[] = {3, 2, 2}, need[3][3], safe[3], count = 0, finished[3] = {0};
    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
            need[i][j] = max[i][j] - alloc[i][j];

    while (count < 3) {
        int found = 0;
        for (int i = 0; i < 3; i++) {
            if (!finished[i]) {
                int can_allocate = 1;
                for (int j = 0; j < 3; j++)
                    if (need[i][j] > avail[j]) {
                        can_allocate = 0;
                        break;
                    }
                if (can_allocate) {
                    for (int j = 0; j < 3; j++)
                        avail[j] += alloc[i][j];
                    safe[count++] = i;
                    finished[i] = 1;
                    found = 1;
                }
            }
        }
        if (!found) { // If no process can be safely allocated
            printf("System is in an unsafe state.\n");
            return 1;
        }
    }

    printf("Safe Sequence: ");
    for (int i = 0; i < 3; i++)
        printf("P%d ", safe[i]);
    return 0;
}

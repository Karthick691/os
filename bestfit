#include <stdio.h>

void bestFit(int blocks[], int blockSize, int processes[], int processSize) {
    int allocation[10];
    
    for (int i = 0; i < processSize; i++) {
        allocation[i] = -1;
    }
    
    for (int i = 0; i < processSize; i++) {
    
        int bestIdx = -1;
        for (int j = 0; j < blockSize; j++) {
            if (blocks[j] >= processes[i]) {
                if (bestIdx == -1 || blocks[j] < blocks[bestIdx]) {
                    bestIdx = j;
                }
            }
        }
    
        if (bestIdx != -1) {
            allocation[i] = bestIdx;
            blocks[bestIdx] -= processes[i];  
        }
    }

    printf("\nProcess No\tProcess Size\tBlock No\tBlock Size remain\n");
    for (int i = 0; i < processSize; i++) {
        if (allocation[i] != -1) {
            printf("%d\t\t%d\t\t%d\t\t%d\n", i + 1, processes[i], allocation[i] + 1, blocks[allocation[i]]);
        } else {
            printf("%d\t\t%d\t\tNot Allocated\n", i + 1, processes[i]);
        }
    }
}

int main() {
    int blocks[10] = {100, 500, 200, 300};  
    int blockSize = 4;  
    int processes[10] = {212, 417, 112}; 
    int processSize = 3;  

    bestFit(blocks, blockSize, processes, processSize);

    return 0;
}
